// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/rust.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class RustBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  ffi.Pointer<ffi.Void> chars_map(
    ffi.Pointer<ffi.UnsignedChar> usfm,
    int len,
    ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>> out,
    ffi.Pointer<ffi.Size> out_len,
  ) {
    return _chars_map(usfm, len, out, out_len);
  }

  late final _chars_mapPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
            ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>>,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('chars_map');
  late final _chars_map = _chars_mapPtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.UnsignedChar>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.UnsignedInt>>,
          ffi.Pointer<ffi.Size>,
        )
      >();

  void insert(ffi.Pointer<ffi.Void> map, int chr, double width, double height) {
    return _insert(map, chr, width, height);
  }

  late final _insertPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.UnsignedInt,
            ffi.Float,
            ffi.Float,
          )
        >
      >('insert');
  late final _insert = _insertPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int, double, double)>();

  ffi.Pointer<ffi.Void> layout(
    ffi.Pointer<ffi.Void> map,
    ffi.Pointer<ffi.UnsignedChar> usfm,
    int len,
  ) {
    return _layout(map, usfm, len);
  }

  late final _layoutPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.UnsignedChar>,
            ffi.Size,
          )
        >
      >('layout');
  late final _layout = _layoutPtr
      .asFunction<
        ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedChar>,
          int,
        )
      >();
}
